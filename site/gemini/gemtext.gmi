# gemtext の仕様

gemtext の仕様がわからなくなるのでメモ。
基本的な構文は Markdown と似ているができることはかなり少ない。
CSSのようなレンダリングに指示を出すような言語がないため、レンダリングに関して多くの部分がクライアントに委ねられている。

## サポートされている機能

* テキスト
* リンク
* 見出し
* リスト
* 引用
* 整形済みテキスト

## テキスト

エディター側で長い行に改行を入れるようなことはせず、クライアント側で画面サイズに合わせて折り返すようにする。
改行は Markdown や HTML のように前の行と連結されるようなことはしない。改行はそのまま描写される。

## リンク

リンクは => を使う。Markdown や HTML のように文章の途中にリンクを入れることはできず、以下のように書く必要がある。

```
=> gemini://example.com
=> https://example.com
=> sftp://example.com
```

* => からは始める
* => の後のスペース・タブは何個でもいい
* => の後に URL を書く（プロトコルに関して制限はない）
* 右側はいつ終わってもいい
* 少なくとも一つのスペース・タブに続いて、
* 人間が読めるラベルを好きなだけ続けることができる

このような文法となっている理由としては、リンクが見つけにくいことと、ユーザがリンクを開くかどうかを判断するためにプロトコルやドメイン名を見て判断できるようにするためとのこと。

## 見出し

見出しは3レベルまでしかサポートしていない。

```
# Heading

## 2 level heading

### 3 level heading

#### 4 level heading is not supported
```

## リスト

リストは * (アスタリスク) のみをサポートしている。

```
* 1st
* 2nd
* 3rd
```

ネストされたリストはサポートされていない。

## 引用

引用は一行のみサポートされている。> で始まる行が引用として解釈される。

```
> この文章は引用。
```

引用されたテキストの扱いについてもクライアント側に任されているようだ。

## 整形済みテキスト

Gemtext では ``` で始まる行によりクライアントに「整形済みテキストモード」に切り替える。
整形済みテキストモードでは、クライアントはリンクや見出しかといった検査は行わない。
そのため、``` で挟まれた部分では HTML の <pre>、</pre> のような動作をする。

整形済みテキストは ASCII アートやソースコードで使うことができる。
整形済みテキストモードをオンにする ``` の後に続く文字の扱いについては特に決められておらず、コンテンツの alt として扱われるかもしれないとのこと。

つまり、

```c
#include <stdio.h>

int main(int argc, char **argv) {
  printf("Hello, World!\n");

  return 0;
}
```

と書いたとき、*c* はレンダリングされてしまうかもしれないし、クライアント側でC言語のコードとして解釈されるかどうかはクライアント次第ということだ。

## 参考リンク

=> gemini://gemini.circumlunar.space/docs/cheatsheet.gmi
=> gemini://gemini.circumlunar.space/docs/gemtext.gmi
